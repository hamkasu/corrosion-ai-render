# app.py - Calmic Corrosion Detection AI
from flask import Flask, request, redirect, url_for, send_file, render_template, jsonify, make_response
from flask_login import LoginManager, login_user, logout_user, login_required, current_user, UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from ultralytics import YOLO
from PIL import Image
import os
import uuid
import sqlite3
import base64
from io import BytesIO
import pytz
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-in-production'
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['RESULT_FOLDER'] = 'static/results'

# Create required folders
for folder in [app.config['UPLOAD_FOLDER'], app.config['RESULT_FOLDER'], 'static/results/markup', 'static/reports']:
    os.makedirs(folder, exist_ok=True)

# ===========================
# Timezone
# ===========================
tz = pytz.timezone('Asia/Kuala_Lumpur')

# ===========================
# User Authentication
# ===========================
class User(UserMixin):
    def __init__(self, id, username, password_hash, role='user'):
        self.id = str(id)
        self.username = username
        self.password_hash = password_hash
        self.role = role

    @staticmethod
    def check_password(pw_hash, password):
        return check_password_hash(pw_hash, password)

users = [
    User(1, "admin", generate_password_hash("admin123"), "admin"),
    User(2, "user", generate_password_hash("user123"), "user")
]

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return next((u for u in users if u.id == user_id), None)

# ===========================
# Initialize Database
# ===========================
def init_db():
    conn = sqlite3.connect('corrosion.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS detections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            original_image TEXT NOT NULL,
            result_image TEXT NOT NULL,
            result_text TEXT,
            high_severity INTEGER DEFAULT 0,
            medium_severity INTEGER DEFAULT 0,
            low_severity INTEGER DEFAULT 0,
            confirmed BOOLEAN DEFAULT FALSE,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            comments TEXT DEFAULT '',
            custom_name TEXT DEFAULT ''
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# ===========================
# Load YOLO Model
# ===========================
try:
    model = YOLO('best.pt')  # Your trained model
except Exception as e:
    print("‚ùå Model not loaded:", str(e))
    model = None

# ===========================
# Prediction Function
# ===========================
def predict_image(filepath):
    if not model or not os.path.exists(filepath):
        return "no_detection.jpg", "Model not available", 0, 0, 0
    try:
        image = Image.open(filepath).convert("RGB").resize((640, 640))
        results = model(
            source=image,
            conf=0.3,
            iou=0.2,
            max_det=10,
            retina_masks=True
        )
        # Count severity
        high = med = low = 0
        if results[0].boxes:
            for box in results[0].boxes:
                conf = box.conf.item()
                if conf > 0.7:
                    high += 1
                elif conf > 0.5:
                    med += 1
                else:
                    low += 1

        result_text = f"Corrosion Detected: PASS ({high+med+low} spot(s))<br>Severity: High={high}, Medium={med}, Low={low}"
        result_filename = f"result_{uuid.uuid4().hex[:8]}.jpg"
        result_path = os.path.join(app.config['RESULT_FOLDER'], result_filename)
        Image.fromarray(results[0].plot()).save(result_path)
        return result_filename, result_text, high, med, low
    except Exception as e:
        print("‚ùå Predict error:", str(e))
        return "no_detection.jpg", f"Error: {str(e)}", 0, 0, 0

# ===========================
# Routes
# ===========================
@app.route('/')
def home():
    stats = {'total': 0, 'confirmed': 0, 'high': 0, 'med': 0, 'low': 0}
    try:
        conn = sqlite3.connect('corrosion.db')
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute("SELECT * FROM detections")
        rows = c.fetchall()
        conn.close()
        stats = {
            'total': len(rows),
            'confirmed': sum(1 for r in rows if r['confirmed']),
            'high': sum(r['high_severity'] for r in rows),
            'med': sum(r['medium_severity'] for r in rows),
            'low': sum(r['low_severity'] for r in rows)
        }
    except Exception as e:
        print("üìä Stats error:", str(e))
    dark_mode = request.cookies.get('dark_mode') == '1'
    return render_template('home.html', stats=stats, dark_mode=dark_mode)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = next((u for u in users if u.username == username), None)
        if user and user.check_password(user.password_hash, password):
            login_user(user)
            return redirect('/')
        return 'Invalid credentials', 401
    dark_mode = request.cookies.get('dark_mode') == '1'
    return render_template('login.html', dark_mode=dark_mode)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect('/login')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect('/')
    file = request.files['file']
    if file.filename == '':
        return redirect('/')
    if file:
        filename = file.filename
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        result_filename, result_text, high, med, low = predict_image(filepath)

        # Save to DB
        timestamp = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')
        try:
            conn = sqlite3.connect('corrosion.db')
            c = conn.cursor()
            c.execute('''
                INSERT INTO detections 
                (original_image, result_image, result_text, high_severity, medium_severity, low_severity, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (filename, result_filename, result_text, high, med, low, timestamp))
            conn.commit()
            conn.close()
        except Exception as e:
            print("‚ùå DB Save failed:", str(e))

        dark_mode = request.cookies.get('dark_mode') == '1'
        return render_template('result.html',
            filename=filename,
            result_filename=result_filename,
            result_text=result_text,
            custom_name='',
            comments='',
            dark_mode=dark_mode
        )

@app.route('/save_comment', methods=['POST'])
def save_comment():
    data = request.get_json()
    try:
        conn = sqlite3.connect('corrosion.db')
        c = conn.cursor()
        c.execute("UPDATE detections SET comments = ? WHERE result_image = ?", 
                  (data['comment'], data['result_image']))
        conn.commit()
        conn.close()
        return jsonify(success=True)
    except Exception as e:
        return jsonify(success=False, error=str(e)), 500

@app.route('/rename_report', methods=['POST'])
def rename_report():
    data = request.get_json()
    try:
        conn = sqlite3.connect('corrosion.db')
        c = conn.cursor()
        c.execute("UPDATE detections SET custom_name = ? WHERE result_image = ?", 
                  (data['custom_name'], data['result_image']))
        conn.commit()
        conn.close()
        return jsonify(success=True)
    except Exception as e:
        return jsonify(success=False, error=str(e)), 500

@app.route('/reports')
@login_required
def view_reports():
    try:
        # Check if DB exists
        if not os.path.exists('corrosion.db'):
            return "<h3>‚ùå Database not found! Run init_db.py</h3><br><a href='/'>Back</a>"

        conn = sqlite3.connect('corrosion.db')
        conn.row_factory = sqlite3.Row  # Allows dict-style access
        c = conn.cursor()
        c.execute("SELECT * FROM detections ORDER BY timestamp DESC")
        rows = c.fetchall()
        conn.close()

        # Debug: Print how many reports found
        print(f"üìä Found {len(rows)} reports")

        # Generate HTML table
        table_rows = ""
        for row in rows:
            name = row['custom_name'] or row['original_image']
            table_rows += f"""
            <tr>
                <td>{row['id']}</td>
                <td><small>{name}</small></td>
                <td>High: {row['high_severity']}, Med: {row['medium_severity']}, Low: {row['low_severity']}</td>
                <td>{"‚úÖ Yes" if row['confirmed'] else "‚ùå No"}</td>
                <td><small>{row['timestamp']}</small></td>
                <td>
                    <a href="/download_pdf/{row['id']}" class="btn btn-sm btn-outline-primary">PDF</a>
                </td>
            </tr>
            """

        if not table_rows:
            table_rows = '<tr><td colspan="6" class="text-center text-muted">No reports found in database.</td></tr>'

        return f'''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üìã Inspection Reports</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        </head>
        <body>
            <div class="container py-4">
                <a href="/" class="btn btn-outline-primary btn-sm mb-3">üè† Home</a>
                <h1 class="mb-4">Inspection Reports</h1>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Report Name</th>
                                <th>Severity</th>
                                <th>Confirmed</th>
                                <th>Timestamp</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>{table_rows}</tbody>
                    </table>
                </div>
            </div>
        </body>
        </html>
        '''
    except Exception as e:
        return f"<h3>‚ùå Error loading reports: {str(e)}</h3><br><a href='/'>Back</a>"
@app.route('/confirm/<result_filename>')
def confirm(result_filename):
    correct = request.args.get('correct') == 'true'
    try:
        conn = sqlite3.connect('corrosion.db')
        c = conn.cursor()
        c.execute("UPDATE detections SET confirmed = ? WHERE result_image = ?", (correct, result_filename))
        conn.commit()
        conn.close()
    except Exception as e:
        print("‚ùå DB Update failed:", str(e))

    dark_mode = request.cookies.get('dark_mode') == '1'
    return render_template('confirm.html', correct=correct, dark_mode=dark_mode)

@app.route('/toggle_dark_mode', methods=['POST'])
@login_required
def toggle_dark_mode():
    resp = make_response(jsonify(success=True))
    if request.cookies.get('dark_mode') == '1':
        resp.set_cookie('dark_mode', '0', max_age=31536000)
    else:
        resp.set_cookie('dark_mode', '1', max_age=31536000)
    return resp

@app.route('/save_markup', methods=['POST'])
def save_markup():
    try:
        data = request.get_json()
        image_name = data['image_name']
        markup_data = data['markup_data'].split(',')[1]
        image_data = base64.b64decode(markup_data)

        markup_dir = os.path.join(app.config['RESULT_FOLDER'], 'markup')
        os.makedirs(markup_dir, exist_ok=True)
        markup_path = os.path.join(markup_dir, f"markup_{image_name}")

        with open(markup_path, 'wb') as f:
            f.write(image_data)

        return {"success": True}
    except Exception as e:
        print("‚ùå Save markup failed:", str(e))
        return {"success": False, "error": str(e)}, 500


@app.route('/download_pdf/<int:detection_id>')
@login_required
def download_pdf(detection_id):
    try:
        conn = sqlite3.connect('corrosion.db')
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute("SELECT * FROM detections WHERE id = ?", (detection_id,))
        row = c.fetchone()
        conn.close()

        if not row:
            return "Report not found", 404

        from generate_pdf import create_pdf_report

        orig_path = os.path.join('static/uploads', row['original_image'])
        result_path = os.path.join('static/results', row['result_image'])
        pdf_filename = f"report_{detection_id}.pdf"
        pdf_path = os.path.join('static/reports', pdf_filename)

        # Create reports folder
        os.makedirs('static/reports', exist_ok=True)

        # Generate PDF
        create_pdf_report(
            orig_path,
            result_path,
            row['result_text'],
            pdf_path,
            row['original_image'],
            row['comments'],
            row['custom_name']
        )

        # Serve PDF
        return send_file(pdf_path, as_attachment=True, download_name=pdf_filename)

    except Exception as e:
        print("‚ùå PDF Error:", str(e))
        return f"<h3>Error: {str(e)}</h3><br><a href='/reports'>Back</a>"

@app.route('/download_all_pdfs')
@login_required
def download_all_pdfs():
    import zipfile
    memory_file = io.BytesIO()
    with zipfile.ZipFile(memory_file, 'w') as zf:
        for filename in os.listdir('static/reports'):
            if filename.endswith('.pdf'):
                zf.write(os.path.join('static/reports', filename), filename)
    memory_file.seek(0)
    return send_file(memory_file, mimetype='application/zip', as_attachment=True, download_name='all_reports.zip')

@app.route('/delete_report', methods=['POST'])
@login_required
def delete_report():
    data = request.get_json()
    report_id = data.get('id')

    if not report_id:
        return jsonify(success=False, error="No ID provided"), 400

    try:
        conn = sqlite3.connect('corrosion.db')
        conn.row_factory = sqlite3.Row
        c = conn.cursor()
        c.execute("SELECT original_image, result_image FROM detections WHERE id = ?", (report_id,))
        row = c.fetchone()
        if not row:
            return jsonify(success=False, error="Report not found"), 404

        # Delete image files
        uploads_path = os.path.join(app.config['UPLOAD_FOLDER'], row['original_image'])
        results_path = os.path.join(app.config['RESULT_FOLDER'], row['result_image'])

        if os.path.exists(uploads_path):
            os.remove(uploads_path)
        if os.path.exists(results_path):
            os.remove(results_path)

        # Delete markup if exists
        markup_path = os.path.join(app.config['RESULT_FOLDER'], 'markup', f"markup_{row['result_image']}")
        if os.path.exists(markup_path):
            os.remove(markup_path)

        # Delete from database
        c.execute("DELETE FROM detections WHERE id = ?", (report_id,))
        conn.commit()
        conn.close()

        return jsonify(success=True)
    except Exception as e:
        print("‚ùå Delete failed:", str(e))
        return jsonify(success=False, error=str(e)), 500


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)