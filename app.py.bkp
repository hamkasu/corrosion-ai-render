# app.py - Corrosion Detection Web App with YOLOv8 and Flask

from flask import Flask, request, render_template, redirect, url_for
from ultralytics import YOLO
from PIL import Image
import os
import uuid

# ===========================
# Flask App Setup
# ===========================
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['RESULT_FOLDER'] = 'static/results'

# Create folders if they don't exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['RESULT_FOLDER'], exist_ok=True)

# ===========================
# Load Your Custom YOLO Model
# ===========================
# Make sure 'best.pt' is in the same folder as this script
MODEL_PATH = 'best.pt'  # Path to your trained model

try:
    model = YOLO(MODEL_PATH)
    print("‚úÖ Model loaded successfully!")
except Exception as e:
    print("‚ùå Error loading model:", str(e))
    print("Make sure 'best.pt' exists in this folder.")
    model = None

# ===========================
# Prediction Function
# ===========================
def predict_image(filepath):
    """
    Runs YOLO model on image, saves result with bounding boxes
    Returns: result image filename, detection result text
    """
    if model is None:
        print("‚ùå Model is not loaded")
        return None, "Model failed to load"

    try:
        print(f"üñºÔ∏è Loading image: {filepath}")
        image = Image.open(filepath)

        # Optional: Resize to reduce memory usage
        image = image.resize((800, 600))
        print("‚úÖ Image loaded and resized")

        # Run inference
        print("üöÄ Running YOLO inference...")
        results = model(image, conf=0.25)
        print("‚úÖ Inference completed")

        # Get number of detections
        num_detections = len(results[0].boxes)
        print(f"üìä Detections: {num_detections}")

        # Plot result
        result_image = results[0].plot()
        result_pil = Image.fromarray(result_image)

        # Save result
        result_filename = "result_" + str(uuid.uuid4())[:8] + ".jpg"
        result_path = os.path.join(app.config['RESULT_FOLDER'], result_filename)
        result_pil.save(result_path)
        print(f"üíæ Result saved to: {result_path}")

        # Generate result text
        if num_detections > 0:
            result_text = f"Corrosion Detected ‚úÖ ({num_detections} spot(s))"
        else:
            result_text = "No Corrosion ‚úÖ"

        return result_filename, result_text

    except Exception as e:
        print("‚ùå Prediction failed:", str(e))
        import traceback
        traceback.print_exc()  # Full error log
        return None, "Error analyzing image"

# ===========================
# Routes
# ===========================

@app.route('/')
def home():
    return render_template('upload.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    
    if file:
        # Save uploaded image
        filename = file.filename
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        # Run AI prediction
        result_filename, result_text = predict_image(filepath)

        # Show result page
        return render_template(
            'result.html',
            original_filename=filename,
            result_filename=result_filename,
            result=result_text
        )
    
    return "Upload failed", 400

# ===========================
# Run the App
# ===========================
if __name__ == '__main__':
    print("üåç Starting Corrosion Detection Server...")
    print("üëâ Open http://localhost:5000 in your browser")
    app.run(debug=True)